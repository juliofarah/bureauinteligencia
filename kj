[1mdiff --git a/core/generics/Controller.php b/core/generics/Controller.php[m
[1mindex 8be726a..0cf8108 100644[m
[1m--- a/core/generics/Controller.php[m
[1m+++ b/core/generics/Controller.php[m
[36m@@ -86,10 +86,24 @@[m [mclass Controller {[m
         return $this->returnJson($countries);[m
     }[m
     [m
[31m-    public function fonts() {[m
[31m-        $fonts = $this->dao->getFonts();[m
[32m+[m[32m    public function fonts($group = null) {[m[41m        [m
[32m+[m[32m        $fonts = $this->dao->getFonts();[m[41m        [m
[32m+[m[32m        if($group != null)[m[41m[m
[32m+[m[32m            $fonts = $this->filterFontsByGroup ($group, $fonts);[m[41m[m
         return $this->returnJson($fonts);[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m     [m
[32m+[m[32m     * @param type $groupId[m[41m[m
[32m+[m[32m     * @param ArrayObject $fonts[m[41m[m
[32m+[m[32m     * @return ArrayObject[m[41m [m
[32m+[m[32m     */[m[41m[m
[32m+[m[32m    private function filterFontsByGroup($groupId, ArrayObject $fonts){[m[41m[m
[32m+[m[32m        $group = new Group();[m[41m[m
[32m+[m[32m        $group->setId($groupId);[m[41m[m
[32m+[m[32m        return $group->filterFontsByGroup($fonts);[m[41m[m
[32m+[m[32m    }[m[41m[m
[32m+[m[41m    [m
     private function returnJson(ArrayObject $listResults){[m
         $json = '[';[m
         if($listResults->count() > 0){[m
[1mdiff --git a/core/generics/datacenter/Group.php b/core/generics/datacenter/Group.php[m
[1mindex 41a5bae..7a931bb 100644[m
[1m--- a/core/generics/datacenter/Group.php[m
[1m+++ b/core/generics/datacenter/Group.php[m
[36m@@ -6,10 +6,50 @@[m
  * @author Ramon[m
  */[m
 class Group extends Param{[m
[31m-[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m    [m
[32m+[m[32m     * @var Map[m[41m [m
[32m+[m[32m     */[m
[32m+[m[32m    private $map;[m
[32m+[m[41m    [m
[32m+[m[32m    public function Group($name = null, $id = null){[m
[32m+[m[32m        parent::Param($name, $id);[m
[32m+[m[32m        if($name == null && $id == null){[m
[32m+[m[32m            $this->map = new HashMap();[m
[32m+[m[32m            $this->fontsPerGroup();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
     public function getType() {[m
         return "groups";[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m    private function fontsPerGroup(){[m[41m        [m
[32m+[m[32m        $this->map->put(1, array(1,2,3,4));[m
[32m+[m[32m        $this->map->put(2, array(1,2,5,6,7));[m
[32m+[m[32m        $this->map->put(3, array(1,2,8));[m
[32m+[m[32m        $this->map->put(4, array(9,10));[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    public function getFonts(){[m[41m       [m
[32m+[m[32m        return $this->map->get($this->id());[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m[41m     [m
[32m+[m[32m     * @param ArrayObject $fonts[m
[32m+[m[32m     * @return ArrayObject[m[41m [m
[32m+[m[32m     */[m
[32m+[m[32m    public function filterFontsByGroup(ArrayObject $fonts){[m
[32m+[m[32m        $fontsIt = $fonts->getIterator();[m
[32m+[m[32m        $fontsAvaiableToThisGroup = new ArrayObject();[m
[32m+[m[32m        $fontsToThisGroups = $this->getFonts();[m
[32m+[m[32m        while($fontsIt->valid()){[m
[32m+[m[32m            if(in_array($fontsIt->current()->id(), $fontsToThisGroups))[m
[32m+[m[32m                    $fontsAvaiableToThisGroup->append ($fontsIt->current());[m
[32m+[m[32m            $fontsIt->next();[m
[32m+[m[32m        }[m
[32m+[m[32m        return $fontsAvaiableToThisGroup;[m
[32m+[m[32m    }[m[41m        [m
 }[m
 [m
 ?>[m
[1mdiff --git a/test/datacenter/testListSubgroups.php b/test/datacenter/testListSubgroups.php[m
[1mindex beadf73..2d5905b 100644[m
[1m--- a/test/datacenter/testListSubgroups.php[m
[1m+++ b/test/datacenter/testListSubgroups.php[m
[36m@@ -9,10 +9,27 @@[m
     require_once '../../core/generics/datacenter/Subgroup.php';[m
     [m
     $controller = new Controller(new GenericDao(Connection::connect()));[m
[31m-    assertEquals($controller->subgroups(1), jsonExpected());[m
[32m+[m[32m    listSubgroupsFromGroup1($controller);[m
[32m+[m[32m    listSubgroupsFromGroup2($controller);[m
[32m+[m[32m    listSubgroupsFromGroup3($controller);[m
[32m+[m[32m    listSubgroupsFromGroup4($controller);[m
 ?>[m
 <?[m
[31m-function jsonExpected(){[m
[32m+[m[32mfunction listSubgroupsFromGroup1(Controller $controller){[m
[32m+[m[32m    assertEquals($controller->subgroups(1), jsonExpectedFromGroup1());[m
[32m+[m[32m}[m
[32m+[m[32mfunction listSubgroupsFromGroup2(Controller $controller){[m
[32m+[m[32m    assertEquals($controller->subgroups(2), jsonExpectedFromGroup2());[m
[32m+[m[32m}[m
[32m+[m[32mfunction listSubgroupsFromGroup3($controller){[m
[32m+[m[32m    assertEquals($controller->subgroups(3), jsonExpectedFromGroup3());[m
[32m+[m[32m}[m
[32m+[m[32mfunction listSubgroupsFromGroup4($controller){[m
[32m+[m[32m    assertEquals($controller->subgroups(4), jsonExpectedFromGroup4());[m
[32m+[m[32m}[m
[32m+[m[32m?>[m
[32m+[m[32m<?[m
[32m+[m[32mfunction jsonExpectedFromGroup1(){[m
     $json = '[';[m
     $json .= '{"id":"1","name":"Quantidade Exportada (sc 60kg)"},';[m
     $json .= '{"id":"2","name":"Quantidade Importada (sc 60kg)"},';[m
[36m@@ -23,4 +40,25 @@[m [mfunction jsonExpected(){[m
     $json .= ']';[m
     return $json;[m
 }[m
[32m+[m[32mfunction jsonExpectedFromGroup2(){[m
[32m+[m[32m    $json = '[';[m
[32m+[m[32m    $json .= '{"id":"7","name":"Produ??o (sacas de 60kg)"},';[m
[32m+[m[32m    $json .= '{"id":"8","name":"Estoque"}';[m
[32m+[m[32m    $json .= ']';[m
[32m+[m[32m    return $json;[m[41m    [m
[32m+[m[32m}[m
[32m+[m[32mfunction jsonExpectedFromGroup3(){[m
[32m+[m[32m    $json = '[';[m
[32m+[m[32m    $json .= '{"id":"9","name":"Consumo (sacas de 60kg)"},';[m
[32m+[m[32m    $json .= '{"id":"10","name":"Consumo per capita"}';[m
[32m+[m[32m    $json .= ']';[m
[32m+[m[32m    return $json;[m
[32m+[m[32m}[m
[32m+[m[32mfunction jsonExpectedFromGroup4(){[m
[32m+[m[32m    $json = '[';[m
[32m+[m[32m    $json .= '{"id":"11","name":"C?mbio"},';[m
[32m+[m[32m    $json .= '{"id":"12","name":"Pre?o"}';[m
[32m+[m[32m    $json .= ']';[m
[32m+[m[32m    return $json;[m
[32m+[m[32m}[m
 ?>[m
\ No newline at end of file[m
[1mdiff --git a/test/datacenter/testfont.php b/test/datacenter/testfont.php[m
[1mindex 05449ac..aefc676 100644[m
[1m--- a/test/datacenter/testfont.php[m
[1m+++ b/test/datacenter/testfont.php[m
[36m@@ -1,15 +1,18 @@[m
 <?php[m
     header('Content-Type: text/html; charset=utf-8');[m
[32m+[m[32m    require_once '../../util/Maps/HashMap.php';[m
     require_once '../asserts/Asserts.php';[m
     require_once '../../core/generics/Param.php';[m
     require_once '../../core/generics/datacenter/Font.php';[m
[32m+[m[32m    require_once '../../core/generics/datacenter/Group.php';[m
     require_once '../../core/DataBase/Connection.php';[m
     require_once '../../core/generics/Controller.php';[m
     require_once '../../core/generics/GenericDao.php';    [m
 ?>[m
 <?[m
     $controller = new Controller(new GenericDao(Connection::connect()));[m
[31m-    assertEquals($controller->fonts(),jsonExpected());[m
[32m+[m[32m    assertEquals($controller->fonts(1),jsonExpected());[m
[32m+[m[32m    assertEquals($controller->fonts(4), jsonExpectedForGroup4());[m
 ?>[m
 <?[m
 function jsonExpected() {[m
[36m@@ -18,7 +21,14 @@[m [mfunction jsonExpected() {[m
     $json .= '{"id":"2","name":"USDA"},';[m
     $json .= '{"id":"3","name":"Contrade"},';[m
     $json .= '{"id":"4","name":"AliceWeb"}';[m
[31m-        $json .= ']';[m
[32m+[m[32m    $json .= ']';[m
     return $json;[m
 }[m
[32m+[m[32mfunction jsonExpectedForGroup4(){[m
[32m+[m[32m    $json = '[';[m
[32m+[m[32m    $json .= '{"id":"9","name":"Bacen"},';[m
[32m+[m[32m    $json .= '{"id":"10","name":"Bloonberg"}';[m
[32m+[m[32m    $json .= ']';[m
[32m+[m[32m    return $json;[m[41m    [m
[32m+[m[32m}[m
 ?>[m
warning: LF will be replaced by CRLF in test/datacenter/testListGroups.php.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in core/generics/datacenter/Group.php.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in test/datacenter/testListSubgroups.php.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in test/datacenter/testfont.php.
The file will have its original line endings in your working directory.
